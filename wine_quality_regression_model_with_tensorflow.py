# -*- coding: utf-8 -*-
"""wine_quality_regression_model with tensorflow

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VOA8D3N60mIrmOxye1NIs-mpiI5e1lBO
"""

# from google.colab import drive
# drive.mount('/content/drive')

"""imports"""

#importing required libreries
import numpy as np
import pandas as pd
import tensorflow as tf
from sklearn.preprocessing import Normalizer
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt

#loading datasets
#white-wine dataset
white_wine_data = pd.read_csv("wine quality/winequality-white.csv", sep=";")
print(white_wine_data.head)
# red-wine dataset
red_wine_data = pd.read_csv("wine quality/winequality-red.csv", sep=";")
print(red_wine_data.head)

#preprocesing
# cleaning dataset
# droping rows with 'NaN'
white_wine_data.dropna()
red_wine_data.dropna()

# feature(or say X_data), label(or say Y_data)
white_feature = white_wine_data.iloc[0:,0:11]
white_quality = white_wine_data["quality"]
red_feature = red_wine_data.iloc[0:,0:11]
red_quality = red_wine_data["quality"]

# feature Normalization
normalizer = Normalizer()
white_feature_normalizer = normalizer.fit(white_feature)
white_normalize_feature = white_feature_normalizer.transform(white_feature)

red_feature_normalizer = normalizer.fit(red_feature)
red_normalize_feature = red_feature_normalizer.transform(red_feature)

# traning test split
white_feature_train, white_feature_test,white_quality_train, white_quality_test= train_test_split(white_normalize_feature,
                                                                                                  white_quality, shuffle=True,
                                                                                                  random_state=70, test_size=0.15)
red_feature_train, red_feature_test, red_quality_train, red_quality_test = train_test_split(red_normalize_feature,
                                                                                            red_quality,  shuffle=True,
                                                                                            random_state=70, test_size=0.15)

#define build model function

def build_model(learning_rate):
  # define tf model
  model = tf.keras.models.Sequential()
  # ad NN layer
  model.add(tf.keras.layers.Dense(units=1,input_shape=(11, )))

  # model compile
  model.compile(optimizer=tf.keras.optimizers.RMSprop(learning_rate=learning_rate),
                                                      loss="mean_squared_error",
                                                      metrics= [tf.keras.metrics.RootMeanSquaredError()])

  return model

# model traing function
def train_model(model, features, label, batch_size, epochs):
  # fit traning data to model
  history  = model.fit(x=features, y=label, batch_size=batch_size, epochs=epochs)
  # ex
  epoch = history.epoch
  #
  hist = pd.DataFrame(history.history)
  # Root Mean Squared Error data to plot loss curve
  rmse = hist["root_mean_squared_error"]

  return epoch, rmse

# loss curve ploting
def plot_loss_curve(epoch, rmse, wine_name):
  plt.figure()
  plt.xlabel(wine_name + "epochs")
  plt.ylabel(wine_name + " Root Mean squared Error")
  plt.plot(epoch, rmse)

  plt.show()

# training models
learning_rate= 0.001
batch_size = 10
epochs = 100


# red wine model
red_wine_model = build_model(learning_rate)
red_epochs, red_rmse = train_model(red_wine_model, features=red_feature_train, label=red_quality_train, batch_size=batch_size, epochs=epochs)


# white wine model
white_wine_model = build_model(learning_rate)
white_epochs, white_rmse= train_model(white_wine_model, features=white_feature_train, label=white_quality_train, batch_size=batch_size, epochs=epochs)

plot_loss_curve(red_epochs, red_rmse, "red")

plot_loss_curve(white_epochs, white_rmse, "white")

# predicting values from models
red_pred = red_wine_model.predict(red_feature_test)
white_pred = white_wine_model.predict(white_feature_test)
print("red_prediction")
print(red_pred[0:5])

print("white_prediction")
print(white_pred[0:5])

red_mae=mean_absolute_error(red_quality_test, red_pred)
print("red_mae: ", red_mae)
white_mae = mean_absolute_error(white_quality_test, white_pred)
print("white_mae: ", white_mae)
